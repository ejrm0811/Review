

목표 : 

    안드로이드 스튜디오를 이용해서 어플리케이션 코드를 작성하기 위해서 알아야 할 것은
    
    1. LOGIC 설계   -> 로직을 설계하기 위해서는 자바의 구조와 문법을 파악하고 있어야 한다. ★자바를 공부하는 이유★
    2. 디자인 설계   


2018.10.07 

    Topic : Java_Summary
       
        chapter 01 : Java 란 ?  
        chapter 02 : 변수에 대하여
        chapter 04 : 조건문 중 if
        chapter 06 : 객체 언어

    

    Chapter 1. JAVA란 ?

        1. 자바

            1.1 자바란 ?

                ㄱ. 운영체제에 독립적이다.

                    -> 자바로 작성된 프로그램은 운영체제의 종류에 관계없이 실행 가능하기 때문에, 운영체제에 따라 프로그램을 변경하지 않고도 사용할 수 있다.

                ㄴ. 풍부한 라이브러리를 통해 프로그래밍에 필요한 요소들을 제공한다.

                    -> 모바일(J2ME), 대규모 기업환경(J2EE), XML 등의 기술을 지원한다.

            1.2 자바의 역사

                1991년 썬의 엔지니어들에 의해 고안된 "오크"라는 언어에서 시작.

                초기 목표는 가전제품에 탑재 될 소프트웨어를 만드는 것.(C++의 확장에서 시작하였으나 C++의 단점을 보완하고 장점을 도입하였음.)

                ＃ 구글의 스마트폰 운영체제인 안드로이드에서도 JAVA를 이용한다.

            1.3 자바 언어의 특징.

                ㄱ. 운영체제에 독립적이다.

                    -> OS 에 관계없이 자바로 프로그래밍된 언어를 각자의 OS에 맞는 JVM(자바 가상 머신)을 통해 변환되어 전달된다.
                        ※ 따라서 JVM은 운영체제에 종속적이며 각 OS에 맞는 JVM을 설치해야 한다

                ㄴ. 객체 지향언어.

                    -> Object-Oriented programming language
                    -> 객체 언어의 특징인 "상속, 캡슐화, 다형성"이 잘 적용되어 나타난다.

                ㄷ. 자동 메모리 관리.

                    자바 프로그램이 시작되면, "가비지 컬렉터(Garbage Colletor)"가 자동적으로 메모리를 관리해 줌으로
                    프로그래머는 메모리를 따로 관리하지 않아도 된다.

                ㄹ. 네트워크와 분산처리

                    인터넷과 대규모 분산환경을 지원하기 위한 라이브러리(Java API)를 지원한다.

                ㅁ. 멀티쓰레드를 지원한다.

                    자바의 멀티 쓰레드 프로그램은 시스템과는 관계없이 구현가능하며, 관련 라이브러리(Java API)를 제공한다.

                ㅂ. 동적 로딩(Dynamic Loading)

                    동적 로딩 : 자바 실행시 모든 클래스가 로딩되는 것이 아니라, 필요할 시점에 클래스를 로딩하여 사용할 수 있다.

            1.4 JVM(Java Virtual Machine)

                -> 자바 어플리케이션 <-> JVM <-> OS <-> 하드웨어

                    하드웨어에 맞게 완전히 컴파일 된 상태가 아니고 실행 시에 해석(Interpret)되기 때문에 속도가 느리다는 단점을 지니고 있다.

                    ex) Window OS JVM, Linux OS JVM, Macintosh OS JVM

        2. 자바 개발 환경 구축하기.
            (Google Search) -> 필요할 때 마다 꺼내 쓰기

            2.1 자바 개발도구 JDK 설치 - JVM & Java API
            2.2 JAVA API 문서 설치(라이브러리)
            
        ※ 자주 발생하는 에러와 해결방법 
            (Google Search) -> 필요할 때 마다 꺼내 쓰기

            ex)

                1. cannot find symbol 또는 cannot resolve symbol
                    저장된 변수나 메서드를 찾을 수 없다.
                    (선언되지 않은 변수나 메서드를 사용하거나, 변수 또는 메서드의 이름을 잘못 사용한 경우 발생.)

                2. ';' expected
                    자바의 모든 문장의 끝에는 ';'을 붙여주어야 한다.

                3. Exception in thread "main" java.lang.NoSuchMethodError: main
                    main 메서드가 존재하지 않는다.
                    메서드의 선언부(public static void main(String[] args)에 오타가 존재하는 경우
                    
                4. Exception in thread "main" java.lang.NoClassDefFoundError:Hello
                    클래스를 찾을 수 없는 경우

                5. illegal start of expression
                    문장의 문법에 오류가 발생했다.
                    ex) 괄호, public, static 등

                6. class, interface, or enum expected

        ※ 주석 사용의 중요성

            ☆ 주석을 이용하여 프로그램 코드에 대한 설명을 적절히 덧붙여 놓으면 프로그램을 이해하는데 큰 도움이 된다.            

                ㄱ. 범위 주석 : /*  */
                ㄴ. 한 줄 수석: //부터 라인 끝까지의 내용은 주석으로 간주된다 .

    Chapter 2. 변수(Variable) ☆☆☆

        1.1 변수란 ?

            변수란, 단 하나의 값을 저장할 수 있는 메모리 공간.

        1.2 변수의 선언과 초기화

            ㄱ. 변수 선언방법 : 변수타입 변수이름;
            ㄴ. 변수 초기화 

                -> 변수 선언 이후 변수를 곧 바로 사용할 수 있으나, 그 전에 반드시 변수를 "초기화" 해주어야 한다.
                    
                    이유 : 
                    메모리는 여러 프로그램이 공유하는 자원이므로 
                    전에 다른 프로그램에 의해 저장된 '알 수 없는 값'이 남아 있을 수 있기 때문. 
        
            정리.

                int shin;       // 선언
                int shin = 25;  // 초기화

        1.3 변수의 명명규칙

            프로그래밍에서 사용하는 모든 이름을 '식별자'라고 하며 
            같은 영역 내에서 서로 구분 될 수 있어야 함.

            ㄱ. 대소문자가 구분되며 길이에 제한이 없다.
            ㄴ. 예약어를 사용해서는 안된다.
            
                예약어 : keyword
                    ex) abstract, assert, boolean, break, byte, case, catch, char, class, const, continue, default, double, 등

            ㄷ. 숫자로 시작해서는 안된다.
            ㄹ. 특수문자는 _와 $만을 허용한다.

            ※ 권장규칙

                ㄱ. 클래스 이름의 첫 글자는 항상 대문자로 한다.
                ㄴ. 여러 단어로 이루어진 이름은 단어의 첫 글자를 대문자로 한다.
                ㄷ. 상수의 이름은 모두 대문자로 한다. 여러 단어로 이루어진 경우 '_'로 구분한다.

        2. 변수의 타입

            값의 종류 : 
                a. 문자.
                b. 숫자.

            
            형태
                a. 기본형 : 실제 값을 저장.(논리형, 문자형, 정수형, 실수형)
                b. 참조형 : 어떤 값이 저장되어 있는 주소를 값으로 갖는다.
                    -> 참조형 변수를 선언할 때는 변수의 타입으로 클래스 이름을 사용
                    -> 클래스이름 변수이름 ; // 변수의 타입이 기본형이 안니 것들은 모두 참조변수이다.

            2.1 기본형

                a. 논리형(Boolean) : true와 false 중 하나 값으로 갖으며, 조건식과 논리적 계산에 사용된다.
                b. 문자형(char) : 문자를 저장하는데 사용되며, 변수에 하나의 문자만 저장할 수 있다.
                c. 정수형(byte, short, int, long) : 정수를 저장하는데 사용되며, 주로 int 사용.
                d. 실수형(float, double) : 실수를 저장하는데 사용되며, 주로 double을 사용.

            2.2 상수와 리터럴

                상수 : 
                    변수와 마찬가지로 값을 저장할 수 있는 공간으로 
                    상수를 선언하는 방법은 변수와 동일하나 앞에 "final"을 붙인다.
                    ex) final int name = 11 ;

                리터럴 :
                    상수와 구분하기 위해서 정의한 용어. 
                    그 자체로 값을 의미하는 것. 위에서 11이 리터럴이라고 불림.

                    문자 리터럴 : 작은 따옴표로 문자 하나를 감싼 것을 의미한다.     // (char ch = 'J')
                    문자열 리터럴 : 두 문자 이상은 큰 따옴표로 감싸야 한다.         // (String name ="JAVA")
                        
                        ※ 참고
                        문자열 리터럴은 "안에 아무 것도 넣지 않는 것을 허용"       // (String str = "");
                        문자 리터럴은 반드시 "안에 하나의 문자가 있어야 한다."     // (Char ch = ' ' ) // 공백 문자는 변수 가능.

            2.3 형식화된 출력 printf()

                printf()는 지시자를 통해 변수의 값을 여러 가지 형식으로 변환하여 출력 하는 기능을 갖는다.

                    %b boolean 형식으로 출력
                    %d 10 진 형식으로 출력
                    %o 8 진 형식으로 출력
                    %x 16진 정수의 형식으로 출력
                    %f 부동 소수점 형식으로 출력
                    %c 문자로 출력
                    %s 문자열로 출력

                    ex) printf("age:%d", age);

            2.4 화면에서 입력받기 - Scanner

                화면으로부터 입력받는 방법

                Scanner scanner = new Scanner(System.in);

        5. 형변환 ☆

            5.1 형변환 이란 ?

                변수 또는 상수의 타입을 다른 타입으로 변환하는 것.

                (타입)피연산자

                괄호 = 캐스트 연산자 또는 '형변환 연산자'라고 부른다.

                ex) double d = 85.d;
                    int score = (int)d; // double 타입의 변수 d를 int타입으로 형변환.


    Chapter 4. 조건문과 반복문.

        1.1 조건문 if

            if (조건식) {
                // 조건식이 참 일 때 수행될 문장.
            }

            -> 조건식 : 비교연산자와 논리 연산자.

        1.3 if-else if 문

        경우의 수가 셋 이상인 경우를 처리 하는 경우 사용되는 문장.

        if (조건식1) {
            // 조건식1의 연산결과가 참 일때 수행될 문장.
        } else if (조건식2) {
            // 조건식2의 연산결과가 참 일때 수행될 문장.
        } else if (조건식3) {
            // 조건식3의 연산결과가 참 일때 수행될 문장.
        } else {
            // 위의 어느 조건식도 만족하지 않을 때 수행될 문장.
        }

        1.4 중첩 if 문 

            if (조건식1) {
                if (조건식2) {
                    // 조건식 1과 2 모두 true 일 때 수행될 문장
                } else {
                    // 조건식 1이 true이고 조건식 2가 false 일때 수행되는 문장.
                }
            } else {
                // 조건식 1이 false일때 수행되는 문장.
            }
        
            ※ 괄호 {}를 넣어 if 블러과 else 블럭의 관계를 확실히 할 것.
                
        2.1 반복문 for

            어떤 작업이 반복적으로 수행되도록 할 때 사용된다.
            for 문은 반복 횟수를 알고 있을 때 적합함.
            
            - 구조와 수행순서

                for (초기화 ; 조건식; 증감식) {
                    // 조건식이 참일 경우 수행될 문장.
                }

                초기화 -> 조건식이 참인 동안 -> 수행될 문장 -> 증감식

            - 참고

                for문에 사용되는 변수의 수가 적은 것이 더 효율적이고 간단하므로 변수들의 관계를 잘 파악하여 불필요한 변수의 사용을 줄이는 것이 좋다.

                나머지 연산자 %를 사용하면 특정 범위의 값들이 순환하면서 반복되는 결과를 얻을 수 있다.
                나누기 연산자 /는 같은 값이 연속적으로 반복되게 할 수 있다.

            - 중첩 for 문. (사용가능)

    chapter 05 배열 ☆☆☆

        1. 배열(Array)

            1.1 배열(Array)이란 ?

                정의 : 같은 타입의 여러 변수를 하나의 묶음으로 다루는 것.
                장점 : 많은 양의 데이터를 손쉽게 다룰 수 있다.

            1.2 배열의 선언과 생성.

                - 배열의 생성.

                    ☆ 배열을 선언하는 것은 단지 '생성된 배열을 다루기 위한 참조변수를 위한 공간이 만드는 것'
                    ☆ 공간을 만든 후 '배열을 생성해야한다.'

                    타입[] 변수이름;
                    변수이름 = new 타입[길이];

                    ex) int[] score;
                        score = new int[5];

                    -> 최적화 : 배열의 선언과 생성을 동시에 진행한다.
                        
                        int[] score = new int[7];

            1.3 배열의 길이와 인덱스
                a. 생성된 배열의 각 저장공간을 '배열의 요소(element)'라고 하며, '배열이름[인덱스]'의 형식으로 배열의 요소에 접근.
                    -> 인덱스는 배열의 요소마다 붙여진 일련의 번호로 각 요소를 구분하는데 사용.
                b. "인덱스의 범위는 0부터 배열길이 -1"까지.
                    단, index로 상수 대신 변수나 수식도 사용할 수 있다는 것.
                c. for문의 제어변수 i는 배열의 index로 사용하기 적합하여, 배열을 다룰 때 for 문은 거의 필수적. √ 
                - 배열의 길이
                    a. 값을 저장할 수 있는 공간의 개수.
                    b. 프로그래밍을 하다 보면 길이가 0인 배열이 필요한 상황이 있다. - 차후 학습
                       -> 배열의 길이는 int범위의 양의 정수(0도 포함) 이어야 한다.
                - 배열이름.length
                    자바에서는 JVM이 모든 배열의 길이를 별도로 관리하며, '배열이름.length'를 통해서 배열의 길이에 대한 정보를 얻을 수 있다.
                    -> 값을 읽을 수만 있을 뿐 변경할 수 없다.
                - 배열의 길이 변경하기.(고 비용 -> 초기 배열의 길이를 2배 정도로 넉넉하게 잡기.)
                    배열에 저장할 공간이 부족한 경우 -> 더 큰 길이의 새로운 배열을 생성 -> 기존의 배열에 저장된 값들을 새로운 배열에 복사.
                    방법 :
                    1. 더 큰 배열을 새로 생성한다.
                    2. 기존 배열의 내용을 새로운 배열에 복사한다.
            1.4 배열의 초기화.
                배열은 생성과 동시에 자동적으로 자신의 타입에 해당하는 기본값으로 초기화.
            1.5 배열의 복사.
                a. 한번 생성하면 그 길이를 변경할 수 없기 때문에 더 많은 저장공간이 필요하다면 보다 큰 배열을 새로 만들고
                   이전 배열로부터 내용을 복사한다.
                    int[] arr = new int[];
                        ...
                    int[] tmp = new int[arr.length*2];
                    for(int i=0;i < arr.length; i++)
                        tmp[i] = arr[i];
                    arr = tmp; // 참조변수 arr이 새로운 배열을 나타내게 된다.
                b. System.arraycopy() 이용.
            1.6 배열의 활용.
            
        2. String 배열.

            2.1 String배열의 선언과 생성. 

                배열의 타입이 String인 경우에도 int배열의 선언과 생성방법은 동일하다.

                ex) String name = new string[a];

                        a 개의 String 타입의 참조변수를 저장하기 위한 공간이 마련되고 
                        참조형 변수의 기본값은 null 이므로 각 요소의 값은 null로 초기화.

            2.2 String 배열의 초기화.

                원래 String은 클래스 이므로 new 연산자를 통해 객체를 생성한다.

                String name = new string[a];

                name[0] = new String("~");
                name[1] = new String("~~");
                ...

            2.3 char배열과 String 클래스.

                문자열은 '문자를 연이어 늘어놓은 것'을 의미 = 문자배열인 char 배열과 같은 뜻.

                but String클래스는 char배열에 기능(메서드)를 추가한 것이므로 String클래스를 주로 이용한다.

            - String클래스의 주요 메서드

                a. char charAt(int index)                   // 문자열에서 해당 위치에 있는 문자를 반환한다.
                b. int length()                             // 문자열의 길이를 반환한다.
                c. String substring(int from, int to)       // 문자열에서 해당 범위에 있는 문자를 반환한다.(to는 범위에서 제외)
                d. boolean equals(String str)               // 문자열의 내용이 같은지 확인한다. true or false
                e. char[] toCharArray()                     // 문자열을 문자배열(char[])로 변환해서 반환한다.

                + char배열과 String클래스의 변환.


    Chapter 06. 객체지향 프로그래밍(Object-Oriented Programming) ☆☆☆☆☆☆ - Logic & grammer

        1. 개체 지향언어.

            1.1 객체지향언어의 역사.
            

            
            

                
                





                    


                              






                        



